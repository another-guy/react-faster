{
  "react-component-functional": {
    "scope": "typescriptreact",
    "prefix": "react-component-functional",
    "body": [
      "import React from 'react';",
      "",
      "export interface Props {",
      "}",
      "",
      "const ${1:$TM_FILENAME_BASE}: React.FC<Props> =",
      "  (props, context) => {",
      "    return (<div>TODO</div>);",
      "  };",
      "",
      "export default ${1:$TM_FILENAME_BASE};",
      ""
    ],
    "description": "Scaffold React functional component."
  },

  "react-component-class-stateteless": {
    "scope": "typescriptreact",
    "prefix": "react-component-class-stateteless",
    "body": [
      "import React from 'react';",
      "",
      "export interface Props {",
      "}",
      "",
      "export default class ${1:$TM_FILENAME_BASE} extends React.Component<Props, {}> {",
      "  render(): JSX.Element {",
      "    return (<div>TODO</div>);",
      "  }",
      "}",
      ""
    ],
    "description": "Scaffold React class component without state."
  },
  
  "react-component-class-stateteful": {
    "scope": "typescriptreact",
    "prefix": "react-component-class-stateteful",
    "body": [
      "import React from 'react';",
      "",
      "export interface Props {",
      "}",
      "",
      "export interface State {",
      "}",
      "",
      "export default class ${1:$TM_FILENAME_BASE} extends React.Component<Props, State> {",
      "  constructor(props: Props) {",
      "    super(props);",
      "    this.state = {",
      "    };",
      "  }",
      "",
      "  render(): JSX.Element {",
      "    return (<div>TODO</div>);",
      "  }",
      "}",
      ""
    ],
    "description": "Scaffold React class component with state."
  },

  "react-mobx-component-functional": {
    "scope": "typescriptreact",
    "prefix": "react-mobx-component-functional",
    "body": [
      "import { observer } from 'mobx-react';",
      "import React from 'react';",
      "",
      "export interface Props {",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<Props> =",
      "  (props, context) => {",
      "    return (<div>TODO</div>);",
      "  };",
      "",
      "export default observer(${1:$TM_FILENAME_BASE});",
      ""
    ],
    "description": "Scaffold mobx-enabled React functional component."
  },

  "react-mobx-component-class-stateteless": {
    "scope": "typescriptreact",
    "prefix": "react-mobx-component-class-stateteless",
    "body": [
      "import { observer } from 'mobx-react';",
      "import React from 'react';",
      "",
      "export interface Props {",
      "}",
      "",
      "export class ${1:$TM_FILENAME_BASE} extends React.Component<Props, {}> {",
      "  render(): JSX.Element {",
      "    return (<div>TODO</div>);",
      "  }",
      "}",
      "",
      "export default observer(${1:$TM_FILENAME_BASE});",
      ""
    ],
    "description": "Scaffold mobx-enabled React class component without state."
  },
  
  "react-mobx-component-class-stateteful": {
    "scope": "typescriptreact",
    "prefix": "react-mobx-component-class-stateteful",
    "body": [
      "import { observer } from 'mobx-react';",
      "import React from 'react';",
      "",
      "export interface Props {",
      "}",
      "",
      "export interface State {",
      "}",
      "",
      "export class ${1:$TM_FILENAME_BASE} extends React.Component<Props, State> {",
      "  constructor(props: Props) {",
      "    super(props);",
      "    this.state = {",
      "    };",
      "  }",
      "",
      "  render(): JSX.Element {",
      "    return (<div>TODO</div>);",
      "  }",
      "}",
      "",
      "export default observer(${1:$TM_FILENAME_BASE});",
      ""
    ],
    "description": "Scaffold mobx-enabled React class component with state."
  },

  "react-hook-useState-initialize-immediately": {
    "scope": "typescriptreact",
    "prefix": "react-hook-useState-initialize-immediately",
    "body": [
      "const [${1}, ${2}] = useState(${3});"
    ],
    "description": "Template of State Hook with immediate initialization."
  },

  "react-hook-useState-initialize-lazily": {
    "scope": "typescriptreact",
    "prefix": "react-hook-useState-initialize-lazily",
    "body": [
      "const [${1}, ${2}] = useState(() => { return ${3}; });"
    ],
    "description": "Template of State Hook with delayed initialization using a callback function."
  },

  "react-hook-useEffect": {
    "scope": "typescriptreact",
    "prefix": "react-hook-useEffect",
    "body": [
      "useEffect(() => { ${1:/* effect */} });"
    ],
    "description": "Template of Effect Hook."
  },

  "react-hook-useEffect-with-cleanup": {
    "scope": "typescriptreact",
    "prefix": "react-hook-useEffect-with-cleanup",
    "body": [
            "useEffect(() => {",
            "  const ${1:subscription} = ${2:someEffect()};",
            "  return () => {",
            "    // Clean up the subscription.",
            "    ${1}.${3:unsubscribe}();",
            "  };",
            "});"
    ],
    "description": "Template of Effect Hook with a cleanup function."
  },

  "react-hook-useEffect-with-dependencies": {
    "prefix": "react-hook-useEffect-with-dependencies",
    "body": [
      "useEffect(() => { ${1:/* effect */} }, [${2:/* dependencies */}]);"
    ],
    "description": "Template of Effect Hook with explicit dependencies."
  },

  "react-hook-useEffect-with-cleanup-and-dependencies": {
    "scope": "typescriptreact",
    "prefix": "react-hook-useEffect-with-cleanup-and-dependencies",
    "body": [
            "useEffect(() => {",
            "  const ${1:subscription} = ${2:someEffect()};",
            "  return () => {",
            "    // Clean up the subscription.",
            "    ${1}.${3:unsubscribe}();",
            "  };",
            "}, [${4:/* dependencies */}]);"
    ],
    "description": "Template of Effect Hook with a cleanup function and explicit dependencies."
  },
  
  "react-component-constructor-props-and-state": {
    "scope": "typescriptreact",
    "prefix": "react-component-constructor-props-and-state",
    "body": [
      "constructor(props: Props) {",
      "  super(props);",
      "  this.state = {",
      "    ${1}",
      "  };",
      "}",
      ""
    ],
    "description": "Scaffold React functional component."
  }
}